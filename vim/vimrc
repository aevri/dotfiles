filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
filetype plugin indent on
set tabstop=4
set shiftwidth=4
set expandtab
let mapleader=","
au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"

set path=** " recursively search in subdirs to match files
set suffixesadd=.py " 'gf' can now try to open from import statements

"" powerline
let g:Powerline_symbols = 'unicode'
set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline
set encoding=utf-8 " Necessary to show Unicode glyphs

"" solarized
syntax enable
if $COLORTERM == 'gnome-terminal'
    set t_Co=256
endif
if has('gui_running')
    set background=dark
    colorscheme solarized
else
    " this looks much better in a solarized dark terminal
    highlight ColorColumn ctermbg=0
    set background=dark
    colorscheme solarized
endif
let g:solarized_hitrail = 1
let g:solarized_visibility = "high"

"" ctrlp
" <Ctrl>p - start searching
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc     " MacOSX/Linux
"set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_extensions = ['tag', 'buffertag', 'mixed']
nmap <Leader>P :CtrlPTag<CR>
nmap <Leader>p :CtrlPBufTag<CR>
nmap <Leader>o :CtrlPBuffer<CR>
nmap <Leader>O :CtrlPMRU<CR>

"" python-mode
" <Ctrl>c rr    - rename
" <Ctrl><Space> - autocomplete
" <Leader>r     - run python file
let g:pymode_folding = 0
let g:pymode_rope_complete_on_dot = 0

"" anticipate mistakes
set history=700
set undolevels=700

"" tabs not spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

"" 80 char, show tabs, trailing chars and extenders
set cc=80
set list listchars=tab:»·,trail:·,extends:¶

"" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

"" Disable backup and swap files - they leave a mess
set nobackup
set nowritebackup
set noswapfile

"" Tagbar
nmap <Leader>t :TagbarToggle<CR>

"" unimpaired
" [<Space> - insert space above line
" <Space>] - insert space above line
" [e       - exchange with line above
" ]e       - exchange with line below

"" vim-commentary
" gcc - comment current line
" visual mode selection + gc - toggle comments for the tcurrent selection

" :set formatoptions (default "tcq")
"      t - textwidth
"      c - comments (plus leader -- see :help comments)
"      q - allogw 'gq' to work
"      n - numbered lists
"      2 - keep second line indent
"      1 - single letter words on next line
"      r - (in mail) comment leader after

" make the join command understand comments and join them intelligently
set formatoptions+=j

" keep second line's indent, great for e.g. multi-line TODO comments
" TODO: blah blah
"       blah blah
set formatoptions+=2

"" ultisnips
" https://github.com/SirVer/ultisnips
" #!<tab> - insert python shebang and encoding
" class<tab> - insert class with docstring
" def<tab> - insert method with docstring
" roprop<tab> - insert read-only property
" rwprop<tab> - insert read-write property
" <ctrl>j - move to next field
" <ctrl>k - move to previous field
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips/"

" make it possible to use the dot operator on visual line selections
xnoremap . :norm.<CR>

" go fullscreen in gvim with F11
map <silent> <F11>
\    :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>

" Fugitive
" make sure that the quickfix window opens after any grep
autocmd QuickFixCmdPost *grep* cwindow

" Surround
" from https://github.com/tpope/vim-surround, how to surround a visual
" selection with a tag:
"
"       Finally, let's try out visual mode.
"       Press a capital V (for linewise visual mode)
"       followed by S<p class="important">
"
